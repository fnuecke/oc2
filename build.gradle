plugins {
    id 'fabric-loom' version '0.7-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name

def getGitRef() {
    try {
        final def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (final Throwable ignored) {
        return "unknown"
    }
}

final def semver = "${version_major}.${version_minor}.${version_patch}"

String build_number = System.getenv("PROMOTED_NUMBER");
if (build_number == null)
    build_number = System.getenv("BUILD_NUMBER")
if (build_number == null)
    build_number = getGitRef()

version = "${semver}+${build_number}"
group = mod_group

repositories {
    maven { url "https://maven.cil.li/" } // Sedna
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings minecraft.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    compileOnly 'org.jetbrains:annotations:16.0.2'

    implementation 'li.cil.oc2:oc2-sedna:0.0.1+268'

    // These three will be provided by oc2-sedna in standalone.
    implementation 'li.cil.ceres:ceres:0.0.2+20'
    implementation 'li.cil.sedna:sedna:0.0.1+99'
    implementation 'li.cil.sedna:sedna-buildroot:0.0.1+15'

    testImplementation 'li.cil.ceres:ceres:0.0.2+20'
    testImplementation 'li.cil.sedna:sedna:0.0.1+99'

    testImplementation "org.mockito:mockito-core:2.+"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

task packageScripts(type: Zip) {
    archiveFileName = "scripts.zip"
    destinationDirectory = file("$buildDir/resources/main/data/oc2/file_systems")
    from "src/main/scripts"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    }
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

task apiJar(type: Jar) {
    classifier = 'api'
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'li/cil/oc2/api/**'
}

artifacts {
    archives apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            artifact jar
            artifact apiJar
        }
    }

    repositories {
        maven {
            url System.getenv("MAVEN_PATH")
        }
    }
}

test {
    useJUnitPlatform()
}