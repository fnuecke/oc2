buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

plugins {
    id 'idea'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'

def getGitRef() {
    try {
        final def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (final Throwable ignored) {
        return 'unknown'
    }
}

final def semver = "${version_major}.${version_minor}.${version_patch}"

String build_number = System.getenv('PROMOTED_NUMBER')
if (build_number == null)
    build_number = System.getenv('BUILD_NUMBER')
if (build_number == null)
    build_number = getGitRef()

version = "${semver}+${build_number}"
group = mod_group
archivesBaseName = "${mod_name.replace(' ', '-')}-MC${minecraft_version}-Forge"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

repositories {
    mavenCentral()
    maven { url 'https://dvs1.progwml6.com/files/maven' } // JEI
    maven { url 'https://maven.cil.li/' } // Sedna
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly "org.jetbrains:annotations:16.0.2"

    implementation "li.cil.sedna:sedna-mc:MC${minecraft_version}-Forge-1.0.1+271"

    // These three will be provided by sedna-mc in standalone.
    implementation "li.cil.ceres:ceres:0.0.2+20"
    implementation "li.cil.sedna:sedna:1.0.1+101"
    implementation "li.cil.sedna:sedna-buildroot:0.0.1+15"

    compileOnly fg.deobf("li.cil.markdown_manual:MarkdownManual:MC${minecraft_version}-Forge-${manual_version}+:api")
    runtimeOnly fg.deobf("li.cil.markdown_manual:MarkdownManual:MC${minecraft_version}-Forge-${manual_version}+")

    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}:${jei_version}")

    testImplementation "li.cil.ceres:ceres:0.0.2+20"
    testImplementation "li.cil.sedna:sedna:1.0.0+100"

    testImplementation "org.mockito:mockito-core:2.+"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.1"
}

task packageScripts(type: Zip) {
    archiveFileName = 'scripts.zip'
    destinationDirectory = file("$buildDir/resources/main/data/oc2/file_systems")
    from 'src/main/scripts'
}

processResources {
    dependsOn { packageScripts }
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand([
                'mod_version'          : version,
                'mod_name'             : mod_name,
                'mod_url'              : mod_url,
                'mod_issues_url'       : mod_issues_url,
                'forge_version_min'    : forge_version_min,
                'minecraft_version_min': minecraft_version_min,
                'sedna_version_min'    : sedna_version_min,
                'manual_version_min'   : manual_version,
        ])
    }
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                oc2 {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                oc2 {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            args '--mod', 'oc2', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                oc2 {
                    source sourceSets.main
                }
            }
        }
    }
}

task copyGeneratedResources(type: Copy) {
    from 'src/generated'
    into 'src/main'
    exclude 'resources/.cache'
}

jar {
    finalizedBy 'reobfJar'

    manifest {
        attributes([
                'Specification-Title'     : 'oc2',
                'Specification-Vendor'    : 'Sangar',
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : "${semver}",
                'Implementation-Vendor'   : 'Sangar',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    archiveClassifier.set('api')
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'li/cil/oc2/api/**'
}

artifacts {
    archives apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            version "MC${minecraft_version}-Forge-${version}"
            artifact jar
            artifact apiJar
        }
    }
    repositories {
        maven {
            url System.getenv('MAVEN_PATH')
        }
    }
}

idea {
    module {
        for (final String exclude in ['assets', 'run', 'out', 'logs', 'src/generated']) {
            excludeDirs += file(exclude)
        }
    }
}

test {
    useJUnitPlatform()
}